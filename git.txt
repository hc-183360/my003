git远程仓库分支的各命令的具体解析(git remote add)

快乐李同学(李俊德-大连理工大学) 2019-04-04 16:50:09  4710  收藏 20
分类专栏： Git
版权

Git
专栏收录该内容
33 篇文章2 订阅
订阅专栏
0 可参考文章
本文重点参考的Git官方中关于git远程仓库的使用教程：
2.5 Git 基础 - 远程仓库的使用
https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8
3.5 Git 分支 - 远程分支
https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF

1 问题背景
看完上面的教程后，我们再一步一步抠细节。
最近在看廖雪峰Git+Git官方的教程，git远程仓库有很多命令，但是教程里面讲解的都是特别模糊的，现在就做一个疏导。

2 命令实例解析
2.1 git branch -vv -a命令具体解析
在开始下面的命令解析之前，我们一定要学会git branch -vv -a这个命令，这个是查询本地仓库+远程仓库+跟踪关系最全的命令了，它可以查询：

本地仓库使用git remote add命令映射过的所有远程仓库的所有分支。
使用4大跟踪远程分支命令关联了所有远程仓库的所有远程跟踪分支的所有本地分支(4大跟踪远程分支命令在下面章节讲解)。

图片解析：上图是博主我使用git branch -vv -a命令查询的结果。

我们首先可以看到有8个分支：一个前面有*星号且绿色的dev分支，一个白色的master分支，6个有remotes/字符串开头且红色的远程分支。

2个本地分支中,注意中括号中的蓝色字符串[origin/dev]和[origin/master]，它们代表本地仓库的dev和master分支分别远程跟踪了远程仓库origin的dev和master远程分支。

其中红色的remotes/origin/HEAD ->origin/master远程分支比较特殊，origin/HEAD就像一个指针，表示默认分支，下图中它指向origin/master，代表着origin/master是默认分支。

我们可以看到博主我曾经用git remote add命令映射的2个远程仓库remotes/liao和remotes/origin。remotes/liao是廖雪峰老师的Git教程的远程仓库，remotes/origin是博主我自己用来测试的远程仓库。

2.2 git remote add <shortname> <url>命令具体解析
2.2.1 命令+选项+参数-解析
命令git remote add <shortname> <url>：将远程仓库唯一的URL<url> 映射成为 在本地仓库中对远程仓库起的别名<shortname>。（注意：git remote add <shortname> <url>只负责映射！它不会产生下载或上传的流量！只有git clone,git fetch,git pull等才产生下载或上传的流量！）

参数<shortname>：在本地仓库中对远程仓库起的别名。而我们按照Git官方教程，一般会把参数<shortname>设置为origin。
为什么要强调在本地仓库中？因为我们要知道git remote add <shortname> <url>是在我们自己的本地仓库对远程仓库起的别名，这个别名只能在我们自己的本地仓库使用，在真正的远程仓库那边，远程仓库的名字是一个绝对唯一的URL(比如:git@github.com:michaelliao/learngit.git)，而不是origin。甚至我们的开发团队成员也可以自定义这个开发团队成员他个人的本地仓库中对远程仓库起的别名，比如官方教程2.5 Git 基础 - 远程仓库的使用中的参考命令git remote add pb https://github.com/paulboone/ticgit，官方给参数<shortname>设置为pb而不是origin了。

参数<url>：远程仓库在互联网上唯一的URL。比如廖雪峰的Git仓库的SSH地址：git@github.com:michaelliao/learngit.git。

2.2.2 命令实例解析-git remote add origin git@github.com:michaelliao/learngit.git
在Git官方教程2.5 Git 基础 - 远程仓库的使用中，它对git remote add <shortname> <url>的解释是：

运行 git remote add <shortname> <url> 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写：

//Git官方教程2.5 Git 基础 - 远程仓库的示例

$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
1
2
3
4
5
6
7
8
9
10
在廖雪峰Git教程添加远程库中，把一个已有的本地仓库与远程仓库关联,也用到了以下命令:

$ git remote add origin git@github.com:michaelliao/learngit.git
1
我们值得注意的是，上面的2份教程对该命令的解释都是：git remote add <shortname> <url>命令用于添加一个新的远程 Git 仓库或者把一个已有的本地仓库与远程仓库关联。其实这些都不准确。

git remote add <shortname> <url>命令真实的用途是：将远程仓库唯一的URL<url> 映射成为 在本地仓库中对远程仓库起的别名<shortname>。这是因为 远程仓库唯一的URL<url> 实在是太长了，比如git remote add origin git@github.com:michaelliao/learngit.git命令中的git@github.com:michaelliao/learngit.git，Git使用者每次使用涉及远程仓库的命令都要加这么长的名字作为参数实在太麻烦了，所以将远程仓库唯一的URL<url> 映射成为 <shortname>，这样使用涉及远程仓库的命令只需要写 本地仓库中对远程仓库起的别名<shortname>就可以啦，比如廖雪峰Git教程添加远程库中的两条命令连用：

上面第一个红框中已经将origin映射为git@github.com:michaelliao/learngit.git。那么第二个红框中想要push本地仓库到远程仓库的命令中的远程仓库参数，甚至本仓库中涉及远程仓库的所有命令的远程仓库参数，都可以使用origin这个超短字符代替，这样是不是超级方便Git使用者操作远程仓库了？

所以这才是git remote add <shortname> <url>命令真实的用途是：将远程仓库唯一的URL<url> 映射成为 在本地仓库中对远程仓库起的别名<shortname>，使用字符更短更间接的本地仓库中对远程仓库起的别名<shortname>来帮助Git使用者简易编写涉及远程仓库的命令。

2.3 git push <远程仓库名> <本地分支名>:<远程分支名>命令具体解析
2.3.1 命令+选项+参数-解析
git push <远程仓库名> <本地分支名>:<远程分支名>：将本地分支推送到远程仓库的远程分支。（注意：这里的远程仓库名依然是在本地仓库中对远程仓库起的别名）
<远程仓库名>：在本地仓库中对远程仓库起的别名，如上面命令解析2(1)中设置的origin。
<本地分支名>：本地分支的名称，比如我们在项目开发，一般主分支(也是默认分支)叫做master，一些新功能开发的分支叫做develop或feature。这些我们在我们自己电脑本地用git branch创建的分支就是本地分支。
<远程分支名>：在远程仓库的普通分支，比如远程仓库上的master，自己在远程仓库创建的分支，以及自己推送到远程仓库上去的在远程仓库上的分支。
（注意：<远程分支名>与 <远程仓库名>的情况不同：
(i)<远程分支名>的取名由git push中的远程分支名决定，一般Git使用者会省略<远程分支名>这个参数，所以Git会默认把<本地分支名>设置为<远程分支名>;
(ii)<本地分支名>无论在远程仓库还是本地仓库就只有一个名字，不像<远程分支名>有一个绝对URL地址名字和一个在本地仓库中的别名。）
2.3.2 git push <远程仓库名> <本地分支名>:<远程分支名>命令的多种常用写法
2.3.2.1 git push
在使用git push命令之前，因为省略了 远程仓库名+本地分支名+远程分支名 3个参数中必要填写的远程仓库名+本地分支名这2个参数，所以当前分支曾经必须被4大跟踪远程分支命令远程跟踪到远程仓库的远程分支。(虽然你可能会说Git可以用当前分支的名字自动填补本地分支名+远程分支名，这样会导致命令的作用太狭隘，所以Git不允许；另外Git再智能也不知道远程仓库名这个参数呀，Git又不会读心术来知道Git使用者想用哪个远程仓库，所以必须至少补上远程仓库名+本地分支名这2个参数)

如果当前分支曾经未被远程跟踪，那么GitBash会报错：

错误提示中的upstream branch就是上游分支(别名:远程分支)，就是因为当前分支曾经未被远程跟踪，那么Git也不知道我们省略的 远程仓库名+本地分支名+远程分支名 3个参数中必要填写远程仓库名+本地分支名这2个参数到底是什么呀！所以报错了。
如果当前分支曾经被远程跟踪，那么GitBash就会默认把参数本地分支名设置为当前分支，把参数远程仓库名+远程分支名设置为远程追踪的远程仓库+远程分支。这样这3个被省略的参数就被填补上了，所以不会报错。
这也解释了《Android群英传：神兵利器》中：为什么git push指令加了-u参数后，往后再push代码只需要git push或git push origin master就可以了。

git push的意义：当Git使用者将当前分支远程跟踪到远程仓库的远程分支后，可以直接用git push命令向远程仓库推送更新。这样，Git使用者再也不用每次输入此格式命令git push origin master来向远程仓库推送更新，因为这个命令太长了导致Git使用者体验不佳。

2.3.2.2 git push <远程仓库名> 举例：git push origin
在使用git push <远程仓库名>命令之前，因为省略了 本地分支名+远程分支名 2个参数中必要填写本地分支名这1个参数，所以当前分支曾经必须被4大跟踪远程分支命令远程跟踪到远程仓库的远程分支。(虽然你可能又会说Git可以用当前分支的名字自动填补本地分支名+远程分支名，但是Git认为这本地分支名+远程分支名两个参数如果直接默认当前分支的名字会让git push <远程仓库名> 命令变得狭隘化，Git认为git push <远程仓库名> 应该是可以在某一分支中随意指定要Push的任意分支，而不应该直接默认当前分支的名字自动填充缺省参数来给Git使用者偷懒，所以Git坚决规定：如果当前分支未被远程跟踪，那么本地分支名必填，远程分支名选填)

如果当前分支曾经未被远程跟踪，那么GitBash会报错：

错误提示中的upstream branch就是上游分支(别名:远程分支)，就是因为当前分支曾经未被远程跟踪，那么Git也不知道我们省略的 本地分支名+远程分支名 2个参数中必要填写的本地分支名这1个参数到底是什么呀！所以报错了。
如果当前分支曾经被远程跟踪，那么GitBash就会默认把参数本地分支名设置为当前分支，把参数远程分支名设置为远程追踪的远程分支。这样这3个被省略的参数就被填补上了，所以不会报错。
git push <远程仓库名>的意义：相比于git push用于方便Git使用者Push当前分支，git push <远程仓库名>主要是方便在当前分支中不用切换到要想Push的任意分支，直接输入git push <要想Push的任意分支的远程仓库名>就可以实现在一个分支中Push另一个分支到远程仓库。

2.3.2.3 git push <远程仓库名> <本地分支名> 举例：git push origin master
git push <远程仓库名> <本地分支名>是第一次Push分支时必须使用的命令(因为第一次Push分支必须指定<远程仓库名> <本地分支名>)，它省略了远程分支名，但是根据Git官方教程介绍，如果Git使用者没有填写<远程分支名>，Git会用已经填写的<本地分支名>来填补缺省的<远程分支名>。

Git官方教程-3.5 Git 分支 - 远程分支是这么描述的：

如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push (远程仓库名) (远程分支名):

$ git push origin serverfix
1
这里有些工作被简化了。 Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix，那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 我们将会详细学习 Git 内部原理 的 refs/heads/ 部分，但是现在可以先把它放在儿。 你也可以运行 git push origin serverfix:serverfix，它会做同样的事 - 相当于“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支”。

注意：git push <远程仓库名> <本地分支名>并未使用短选项-u或长选项--set-upstream，所以它并未使得当前分支远程跟踪了远程分支，所以往后再次Push当前分支时依然要使用git push <远程仓库名> <本地分支名>命令，不可以缩短为git push或者git push <远程仓库名>。

2.3.2.4 git push -u <远程仓库名> <本地分支名> 举例：git push -u origin master
短选项-u用于指定git push命令中的<远程仓库名>的<远程分支名>为<本地分支名>所跟踪的上游分支。
相比于git push <远程仓库名> <本地分支名>，因为git push -u <远程仓库名> <本地分支名>使用了短选项-u，所以它使得当前分支远程跟踪了远程分支。进而，往后再次Push当前分支时可以直接使用git push或者git push <远程仓库名>命令。

2.3.2.5 git push --set-upstream <远程仓库名> <本地分支名> 举例：git push --set-upstream origin master
相比于git push -u <远程仓库名> <本地分支名>，git push --set-upstream <远程仓库名> <本地分支名>把短选项-u换成了长选项--set-upstream。因为--set-upstream长选项等价的短选项是-u，所以git push --set-upstream <远程仓库名> <本地分支名>与git push -u <远程仓库名> <本地分支名>是等价的。

2.3.2.6 git push <远程仓库名> <本地分支名>:<远程分支名> 举例：git push origin serverfix:awesomebranch
一般善于偷懒的Git使用者会直接使用git push -u <远程仓库名> <本地分支名>命令来免去填写<远程分支名> 这个参数的麻烦。但是“免去填写<远程分支名> 这个参数的麻烦”只适用于本地分支名与被推送到的远程分支名相同时的情况。
根据Git官方教程-3.5 Git 分支 - 远程分支的描述：

在本地分支名是serverfix的情况下，如果并不想让远程仓库上的分支也叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。这样就可推送本地分支到一个命名不相同的远程分支。

2.4 git clone <repo> [<dir>]命令具体解析
2.4.1 命令+选项+参数-解析
命令git clone <repo> [<dir>]：复制远程仓库<repo>中HEAD指针指向的分支(默认是master分支,其他分支一律不复制)中的每一次提交记录和所有提交版本的文件，粘贴到本地文件夹当前GitBash所在路径/[<dir>]，如果Git使用者未填写<dir>，那么默认为远程仓库<repo>的项目名，并自动默认远程仓库名称为origin和自动设置本地 master 分支远程跟踪远程仓库的 HEAD指针指向的分支(默认是master分支)。
("远程仓库<repo>中HEAD指针"就是唯一特殊的红色的remotes/origin/HEAD ->origin/master远程分支，origin/HEAD就像一个指针，表示默认分支，下图中它指向origin/master，代表着origin/master是默认分支)

参数<repo>：远程仓库在互联网上唯一的URL。比如廖雪峰的Git仓库的SSH地址：git@github.com:michaelliao/learngit.git。
参数[<dir>]：粘贴下来的所有项目文件应该存放的路径(既可是绝对路径也可是相对路径)，该路径的最后一个字符串代表的是项目根目录(也是:本地仓库名)。若Git使用者未填写<dir>，那么默认为远程仓库<repo>的项目名。
下图便是参数[<dir>]写入绝对路径，hello为项目根目录(也是:本地仓库名)。

2.4.2 命令实例解析-git clone git@github.com:jedlee6/RemoteRepositoryTest.git

上图的git clone git@github.com:jedlee6/RemoteRepositoryTest.git really命令就是克隆远程仓库git@github.com:jedlee6/RemoteRepositoryTest.git到本地仓库really文件夹中。
同时使用git branch -vv -a来查询查询本地仓库+远程仓库+跟踪关系，我们发现：

git clone <repo> [<dir>]只复制远程仓库<repo>中HEAD指针指向的分支，其他分支一律不复制。
虽然远程仓库有4大分支(其中较为特殊的remotes/origin/HEAD ->origin/master远程分支不包括在内)，但是克隆到本地仓库的只有远程仓库<repo>中HEAD指针指向的master分支，这也证实了我们对命令git clone <repo> [<dir>]的一段定义：“复制远程仓库<repo>中HEAD指针指向的分支(默认是master分支)中的每一次提交记录和所有提交版本的文件。”
git clone命令会自动默认远程仓库名称为origin，设置本地 master 分支远程跟踪克隆的远程仓库中HEAD指针指向的master分支。
我们可以在上图片中，绿框圈住的蓝色字符串origin/master看到本地 master 分支远程跟踪远程分支master。
3 其他注意事项
3.1 分支与远程分支与跟踪分支与远程跟踪分支的区别
有一点特别重要：分支不是某一条提交记录串起来的线，分支是一个指针！
[1]git的跟踪分支和远程跟踪分支学习笔记
[2]Git-远程分支，远程跟踪分支，跟踪分支的区别

3.2 四大跟踪远程分支命令
[3]git跟踪远程分支，查看本地分支追踪和远程分支的关系(简书这篇文章里面git branch -u a b命令的a b写反了)
[4]Git本地分支与远程分支的追踪关系
[5]git 设置分支跟踪关系
[6]git 本地分支追踪远程分支

一个本地分支只能远程跟踪一个远程分支，如果设置新的远程跟踪的远程分支，新的会代替旧的。git remote add可以映射多个远程仓库。

在本地创建分支用跟踪远端非master分支，用git checkout -b newbranch origin/special，该命令会以远端special分支的内容创建本地的newbranch分支，从而可以在远端special分支的基础上开发。
如果想要将本地分支与远程分支设置为不同名字，你可以轻松地将上面的newbranch设置为不同的名字：git checkout -b sf origin/serverfix。现在，本地分支 sf 会自动从 origin/serverfix 拉取。

上面的命令也可以简化为git checkout --track origin/special该命令会在本地创建一个special分支用于跟踪远端的special分支并切换到本地special分支。

设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置，即git branch -u origin/serverfix。

3.3 为什么要跟踪远程分支？跟踪远程分支的作用与意义？
在跟踪分支里输入git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。反过来，在跟踪分支里运行git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来，同时Git 还能自动地识别去哪个服务器上抓取、合并到哪个分支。

3.4 --set-upstream选项与--set-upstream-to选项的区别
--set-upstream选项用于指定git push命令中的<远程仓库名>的<远程分支名>为<本地分支名>所跟踪的上游分支。举例：git push --set-upstream origin master。并且--set-upstream长选项等价的短选项是-u，所以上面的举例可以写成git push -u origin master，这两个命令是等价的。
--set-upstream-to选项用于git branch，举例：git branch --set-upstream-to origin/dev dev。并且--set-upstream-to长选项等价的短选项是-u，所以上面的举例可以写成git branch -u origin/dev dev，这两个命令是等价的。
本文参考文献：
[1]git的跟踪分支和远程跟踪分支学习笔记
[2]Git-远程分支，远程跟踪分支，跟踪分支的区别
[3]git跟踪远程分支，查看本地分支追踪和远程分支的关系(简书这篇文章里面git branch -u a b命令的a b写反了)
[4]Git本地分支与远程分支的追踪关系
[5]git 设置分支跟踪关系
[6]git 本地分支追踪远程分支
[7]git push -u origin master和git push <远程主机名> <本地分支名>:<远程分支名>作用
[8]Git官方教程对git push -u选项解释
[9]3.5 Git 分支 - 远程分支
[10]3.1 Git 分支 - 分支简介


快乐李同学(李俊德-大连理工大学)
已关注

5

7

20


专栏目录
GIT代码管理： git remote add
啊哈包子
 8万+
  这里主要以 如何将一份已经写好的代码提交到两个git远端  为例， 更好地理解git remote add这句； 首先要明白一句代码的意思，以github最经常的提示为例： 在这张图面里git init, git add 和git commit 都是前期的准备, 相当于将你本地的文件都上传到了本地仓库，但是还没有像远端仓库提交； 这时执行git remote那句话，就是先将本地仓库...
git - remote add origin 的使用
u013934613的博客
 2945
Global setup: Set up git git config --global user.name "Your Name" git config --global user.email huang.gadela@gmail.com Next steps: mkdir test cd test git init touch READ...



语符律:很凌乱，很多重复的，建议认真整理。3 月前回复


语符律:很凌乱，很多重复的，建议认真整理。3 月前回复


快乐李同学(李俊德-大连理工大学)回复:恩恩，谢谢同学的建议啦，由于文章太过久远就不想改了3 月前回复


哈士奇说喵:哈哈，没想到还能遇到老东家的同事4 月前回复


快乐李同学(李俊德-大连理工大学)回复:恩恩，学长以后多多关照呀^_^4 月前回复


哈士奇说喵回复快乐李同学(李俊德-大连理工大学):我以前就在滴滴呀4 月前回复


快乐李同学(李俊德-大连理工大学)回复:谢谢同学的认可呀，同学之前是在哪工作呀~4 月前回复

相关推荐
git remote 指定分支_常用git命令教程_学历小助手王老...
7-16
# 新建一个分支,并切换到该分支 $ git checkout -b [branch] # 新建一个分支,指向指定commit $ git branch [branch] [commit] # 新建一个分支,与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch]...
git remote 远程仓库介绍和用法_视觉68的博客
7-22
将远程的某个分支上的代码拉到本地 git pull [remote-name] [branch-name] 这个remote-name 是远程仓库的代名称,branch-name 是分支名 5) 添加远程仓库 gitremoteadd[shortname][url]
git 查看远程分支、本地分支、创建分支、把分支推到远程repository、删除本地分支,及常用指令
你是我的天晴
 7603
1 查看远程分支 gitbranch-a2 查看本地分支 $gitbranch3 创建分支 $gitbranchtest4 切换分支到test gitcheckouttest5删除本地分支 git branch -d xxxxx6删除远程分支 gitpushorigin--deletexxxx7删除文件夹 查看本地分支下的文件 ls 得到结果: 删除...
GIT 远程仓库：添加远程库、从远程库克隆
weixin_30398227的博客
 725
到目前为止，我们已经掌握了如何在Git仓库里对一个文件进行时光穿梭，你再也不用担心文件备份或者丢失的问题了。 可是有用过集中式版本控制系统SVN的童鞋会站出来说，这些功能在SVN里早就有了，没看出Git有什么特别的地方。 没错，如果只是在一个仓库里管理文件历史，Git和SVN真没啥区别。为了保证你现在所学的Git物超所值，将来绝对不会后悔。本章开始介绍Git的杀手级功能之一（注意是之一，也就是...
git remote add <name> <url>
qq_40113688的博客
 4233
今天练习 demo 的时候提交的时候出现了这种情况： 原因是在本地创建文件夹的时候忘记在 github 上创建远程仓库了，也就是说这篇文件说的是如何将本地文件夹提交到 github 上. 1、初始化本地文件夹 git init 2、查看本地文件更改的状态 git status 3、将本地文件添加到暂存区 git commit -m "对此次提交的注释" 4、在 github 上创建一个仓库（和...
git命令之git remote的用法
wangjia55的专栏
 32万+
要 参与任何一个 Git 项目的协作,必须要了解该如何管理远程仓库.远程仓库是指托管在网络上的项目仓库,可能会有好多个,其中有些你只能读,另外有些可以写.同他人协作开发某 个项目时,需要管理这些远程仓库,以便推送或拉取数据,分享各自的工作进展.管理远程仓库的工作,包括添加远程库,移除废弃的远程库,管理各式远程库分 支,定义是否跟踪这些分支,等等.本节我们将详细讨论远程库的管理和使用.
通过Git命令修改远程仓库地址
郭宝的博客
 594
方式一：直接修改 git remote set-url origin [url] 例如：Git remote set-url origin gitlab@gitlab.chumob.com:PHP/hasoffer.git 方式二：先删后加 ...
git add remote_Git详解（一）
weixin_39672160的博客
 168
“在工作中，我们离不开git的使用，接下来我会带领大家去真正的认识和使用git。”01—什么是gitgit是一个开源的分布式版本控制系统，并且它可以有效、高速的处理从很小到非常大的项目版本管理。(参考百度百科)上面说到了分布式版本系统，那么延展出来的还有集中式版本系统，通常它的代表是cvs、svn。关于什么是集中式、什么是分布式，我在廖雪峰的官方网站上找了一篇通俗易懂的文章，下面放一个...
git remote add origin_Git极简教程(2)--remote级别的操作
weixin_39775127的博客
 944
刚才说到，remote可以看做是一个人的电脑，假设有十个人合作，那么就有10个remote对象。为了方便大家同步，我们创建一个叫做origin的remote，大家都和这个origin同步，那么大家就可以达成一致了。很多人的Git操作的第一句话是git clone xxx就是把位于xxx的一个remote拷贝到本地，这个remote我们叫做origin。至于自己的电脑，就没必要命名了，反正就自己一个...
git通过命令更换远程仓库地址-----和更换地址后对项目进行操作显示无权限问题
QingFeng-Li的博客
 7万+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;声明：写这篇博客呢，是为了帮助那些像我一样没太注意细节而导致更换远程地址后再次对项目进行操作显示无权限问题的朋友。那么下面我说一下具体场景吧 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;具体场景是这样的我们的项目存储在码云的远程服务器
git add remote_最全的git常用命令（建议收藏）
weixin_39667626的博客
 59
一、 Git 常用命令速查 git branch 查看本地所有分支 git status 查看当前状态 git commit 提交 git branch -a 查看所有的分支 git branch -r 查看远程所有分支 git commit -am "init" 提交并且加注释 git remote add origin git@192.168.1.119:ndshow git push ori...
【Git】git命令之git remote的用法
区块链、去中心化应用、虚拟货币开发服务
 2239
git remote git remote -v git init git add xxx git commit -m 'xxx' git remote add origin ssh://software@172.16.0.30/~/yafeng/.git git push origin master git remote show origin git clone ssh:/...
git remote upstream
liyangyi
 2811
本地出现的问题：无法从远程库pull代码 出问题之前做了下面的操作：      第一是现在另一台机子上配置了一个新的github密钥放在了github上      第二是在同一台机子上clone了两个项目分别是A  B，具体操作如下：           现在有两个git库，一个库A，另一个库B，库B是从库A  fork过来的，然后我把两个库都在机子C上clone了一份CA， CB。为了保证...
Git 里面的 origin 到底代表啥意思?
Benjamin的博客
 5251
作者：田雅文 链接：https://www.zhihu.com/question/27712995/answer/39946123 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 你的代码库(repository)可以存放在你的电脑里，同时你也可以把代码库托管到Github的服务器上。在默认情况下，origin指向的就是你本地的代码库托管在Github上的版本。我...
git remote add和git clone 的区别
Zero丶轩
 864
两者之间的区别 区别 git remote add 只是在您的git config中创建一个条目，指定特定URL的名称。你必须有一个现有的git仓库来使用它。需要init git clone通过复制位于您指定的URI上的现有git存储库来创建新的git存储库。不需要init 配置 Git - 本地初始化项目 - git remote 链接地址 https://blog.csdn.net/m0_37712637/article/details/109091808 Git - 本地初始化项目
git远程仓库操作git remote，git -v，git remote add name url，git fetch，git pull，git push git remote show origi
weixin_44297716的博客
 31
一丶查看远程仓库 列出远程仓库服务器的简写，如果已克隆，最少有一个origingit remote 使用 -v参数，显示需要读写远程仓库使用的Git保存的简写 以及对应的urlgit remote -v origin https://github.com/schacon/ticgit (fetch) origin https://github.com/schacon/ticgit (push) 二丶添加远程仓库 使用clonegit clone url name
usage: git remote add [<options>] <name> <url> -f, --fetch fetch the remote branches ...
weixin_30429201的博客
 1430
按照git官网提示输入 git pushgit remote add origin git@github.com:***3 / elm-1.git -u 　　 链接git远程仓库 出现错误 usage: git remote add [<options>] <name> <url> -f, --fetch fetc...
git remote 命令的用法
彳亍
 3万+
查看关联的远程仓库信息# 查看关联的远程仓库的名称 git remote # 查看关联的远程仓库的详细信息 git remote -v添加远程仓库的关联远程仓库的名称一般默认为 origin ，当然，你可以设置为其他的名称。通过 git clone 下载
————————————————
版权声明：本文为CSDN博主「快乐李同学(李俊德-大连理工大学)」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/wq6ylg08/article/details/89028412

















【学了就忘】Git操作 — 29.Git命令设置别名

繁华似锦Fighting
  
3
2021.05.11 00:17:04
字数 1,041
阅读 105
1、什么是Git命令的别名
Git中命令很多，有些命令比较长，有些命令也不好记，也容易写错。

例如：你有没有经常敲错命令？比如git status？如果敲git st就表示git status那就简单多了。

Git 并不会在你输入部分命令时，自动推断出你想要执行的命令。 如果不想每次都输入完整的Git命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。

也就是给status命令配置别名，告诉Git，以后st就表示status。

总结：什么是别名？

别名用于创建映射到较长命令的较短命令。就和Linux命令设置别名一样。

2、别名的全局配置
（1）配置全局别名
我们就以上面说的git status命令为例进行演示。

我们只需要敲一行命令，告诉Git，以后st就表示status：

# 1.查看工作目录文件状态
L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git status
On branch master
nothing to commit, working tree clean

L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git st
git: 'st' is not a git command. See 'git --help'.

The most similar commands are
        status
        reset
        stage
        stash
        svn

# 可以看到执行git st命令的时候，提示“st”不是git命令。

# 2.给他git status 设置别名
L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git config --global alias.st status

# 3.再次查看工作目录文件状态
L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git status
On branch master
nothing to commit, working tree clean

L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git st
On branch master
nothing to commit, working tree clean

我们可以看到git status命令设置完别名后，别名和原命令都可以使用。

说明：

--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。

我们之前说配置用户签名的时候，--global参数是在系统用户目录下的.gitconfig文件中进行配置。

配置别名的内容如下：

[user]
  name = sun_wk
  email = sun_wk@126.com
[alias]   
  st = status # 这里就是配置的别名
--global参数配置的是全局参数，也就是针对该系统用户，对该系统中所有的Git仓库的配置。

换句话说，就是加上--global参数，该别名对本机中所有的Git仓库都管用。

（2）删除全局别名
有两种方式：

打开系统用户目录下的.gitconfig文件，把该别名手动删除。
使用命令行删除，执行命令：git config --global --unset alias.st。
提示：删除别名之后，别名失效。

3、别名局部配置
（1）配置局部别名
还是以git status命令为例进行演示。

基本上和全局别名的配置一样，就是把--global参数换成--local，或者就是去掉不写。（不写默认就是执行--local参数）

# 下面进行简单说明
# 1.查看工作目录文件状态，使用git st不可以
L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git st
git: 'st' is not a git command. See 'git --help'.

The most similar commands are
        status
        reset
        stage
        stash
        svn

# 2.配置别名
L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git config alias.st status

# 3.再次使用git st，查看工作目录文件状态
L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git st
On branch master
nothing to commit, working tree clean
说明：

没有加--global参数，默认在本地版本库中的配置文件进行配置，所以只针对该仓库起作用。

我们之前说配置用户签名的时候，本地版本库的配置文件为.git/config文件。

现在查看该文件如下：

[core]
  repositoryformatversion = 0
  filemode = false
  bare = false
  logallrefupdates = true
  symlinks = false
  ignorecase = true
[alias]
  st = status # 这里就是配置的局部别名
（2）删除局部别名
有两种方式：

打开当前Git仓库目录下的.git/config文件，把该别名手动删除。
使用命令行删除，执行命令：git config --unset alias.st。
提示：删除别名之后，别名失效。

4、删除所有别名
（1）删除所有全局别名命令：

$ git config --global --remove-section alias
（2）删除所有局部别名命令：

$ git config --remove-section alias
5、小练习
我们上一篇文章介绍了，如何修改Git历史版本信息内容和颜色的显示。

如：git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %C(cyan)%s %C(magenta)(%cr) %C(bold blue)<%an>%Creset'

我们就把上命令配置别名，执行命令如下：

L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)
$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %C(cyan)%s %C(magenta)(%cr) %C(bold blue)<%an>%Creset'"
执行git lg命令，显示效果如下：

当然你也可以把别名定义为log。

总结：随着你继续不断地使用 Git，可能也会经常使用别名命令，所以创建别名这种偷懒的办法我们是赞成的。

补充：git config --global color.ui true：让Git显示顾色，会让命令输出看起来更醒目。（效果没有上面手动配置的颜色显示丰富）

